#version 460

in vec3 fragmentPosition;
in vec3 v_normal;

out vec4 FragColor;

uniform vec4 color;

uniform vec3 lightPosition;
uniform vec3 lightColor;

uniform vec3 viewPosition;

void main() {
	float ambientIntensity = 0.25;
	vec3 ambientColor = vec3(1.0, 1.0, 1.0);
	vec3 ambient = ambientIntensity * ambientColor;

	vec3 normal = normalize(v_normal);
	vec3 lightDirection = normalize(lightPosition - fragmentPosition);

	vec3 diffuse = max(dot(normal, lightDirection), 0.0) * lightColor;

	float specularIntensity = 0.5;
	vec3 viewDirection = normalize(viewPosition - fragmentPosition);
	vec3 reflectDirection = reflect(-lightDirection, normal);

	vec3 specular = specularIntensity * pow(max(dot(viewDirection, reflectDirection), 0.0), 32) * lightColor;

	vec3 lightingColor = (ambient + diffuse + specular);

	FragColor = vec4(lightingColor, 1.0) * color;
}